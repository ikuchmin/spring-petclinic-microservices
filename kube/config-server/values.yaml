# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: spring-petclinic-config-server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "3.4.1"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8888

headlessService:
  enabled: false

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: example.host
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - example.host

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

liveness:
  delay: 60
  timeout: 10
  path: /actuator/health/liveness

readiness:
  delay: 60
  timeout: 10
  path: /actuator/health/readiness

autoscaling:
  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPU: 80
    targetMemory: ""

# Additional volumes on the output Deployment definition.
volumes:
  - name: keystore-volume
    secret:
      secretName: config-server-keystore
      items:
        - key: keystore.p12
          path: keystore.p12

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: keystore-volume
    mountPath: /workspace/keystore
    readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

profiles: "prod, discovery"

eureka:
  client:
    defaultZone:
      valueFrom:
        configMapKeyRef:
          name: discovery-server-address-list-configmap
          key: eureka-address-list

# It is possible to declare the keystore in another helm
# for concrete deployment. Password can be declared using CI,
# helm secrets or sops. Also, it can be crated by hand in concrete
# namespace.
keystore:
  enabled: true
  key: keystore.p12
  filePath: keystore/keystore-prod.p12
  password: testtest

encrypt:
  keystore:
    enabled: true
    alias: configserver
    location: /keystore/keystore.p12
    password:
      valueFrom:
        secretKeyRef:
          name: config-server-keystore-password
          key: keystore-password

metrics:
  enabled: false
  serviceMonitor:
    path:
    jobLabel: ""
    interval: 15s
    scrapeTimeout: ""
